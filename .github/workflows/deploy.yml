name: Build and Deploy Aiolos

on:
  workflow_dispatch:

jobs:
  build-and-push-backend:
    runs-on: [resonect-server]
    env:
      ENVIRONMENT: production
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.RESONECT_AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RESONECT_AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.RESONECT_AWS_PROD_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          
      # Add Docker layer caching
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-backend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-backend-

      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/adonis-api/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            590183887485.dkr.ecr.eu-central-1.amazonaws.com/aiolos-backend:latest
            590183887485.dkr.ecr.eu-central-1.amazonaws.com/aiolos-backend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          
      # Move cache to prevent growing forever
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-and-push-frontend:
    runs-on: [resonect-server]
    env:
      ENVIRONMENT: production
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.RESONECT_AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RESONECT_AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.RESONECT_AWS_PROD_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          
      # Add Docker layer caching
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-frontend
          key: ${{ runner.os }}-buildx-frontend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-

      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/react-frontend/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            590183887485.dkr.ecr.eu-central-1.amazonaws.com/aiolos-frontend:latest
            590183887485.dkr.ecr.eu-central-1.amazonaws.com/aiolos-frontend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache-frontend
          cache-to: type=local,dest=/tmp/.buildx-cache-frontend-new,mode=max
          
      # Move cache to prevent growing forever
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-frontend
          mv /tmp/.buildx-cache-frontend-new /tmp/.buildx-cache-frontend

  wait-for-builds:
    runs-on: [resonect-server]
    needs: [build-and-push-backend, build-and-push-frontend]
    steps:
      - run: echo "All builds completed successfully"

  deploy:
    needs: [wait-for-builds]
    runs-on: [resonect-server]
    env:
      ENVIRONMENT: production
      AWS_ACCESS_KEY_ID: ${{ secrets.RESONECT_AWS_PROD_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.RESONECT_AWS_PROD_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.RESONECT_AWS_PROD_REGION }}
    steps:
      - uses: actions/checkout@v4

      - name: Prepare EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AIOLOS_PROD_EC2_HOST }}
          username: ${{ secrets.AIOLOS_PROD_EC2_USER }}
          key: ${{ secrets.RESONECT_AWS_PROD_SSH_KEY }}
          script: |
            # Create directory if it doesn't exist
            mkdir -p ~/aiolos

      - name: Copy configuration files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AIOLOS_PROD_EC2_HOST }}
          username: ${{ secrets.AIOLOS_PROD_EC2_USER }}
          key: ${{ secrets.RESONECT_AWS_PROD_SSH_KEY }}
          source: ./infra/docker-compose.prod.yml,./infra/Caddyfile,./apps/adonis-api/.env
          target: ~/aiolos
          strip_components: 2

      - name: Deploy with docker-compose over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AIOLOS_PROD_EC2_HOST }}
          username: ${{ secrets.AIOLOS_PROD_EC2_USER }}
          key: ${{ secrets.RESONECT_AWS_PROD_SSH_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
          script: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export AWS_REGION=$AWS_REGION
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 590183887485.dkr.ecr.eu-central-1.amazonaws.com
            cd ~/aiolos
            
            # Get CPU architecture
            ARCH=$(uname -m)
            echo "Running on architecture: $ARCH"
            
            # Pull and start services
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
            
            # Wait a bit for containers to stabilize
            sleep 10
            
            # Check container status
            echo "Checking container status:"
            docker compose -f docker-compose.prod.yml ps
            
            # Check backend logs to diagnose any issues
            echo "Backend container logs:"
            docker compose -f docker-compose.prod.yml logs backend --tail 50

